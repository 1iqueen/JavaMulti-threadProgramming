在使用同步synchronized(this)代码块时需要注意的是,当一个线程访问object的一个synchronized(this)代码块时,
其他线程对同一个object中所有其他synchronized(this)同步代码块的访问将被阻塞,
这说明synchronized使用的"对象监视器"是一个.



和synchronized一样,synchronized(this)代码块也是锁定当前对象的.





Java还支持"任意对象"作为"对象监视器"来实现同步功能,这个"任意对象"大多数是实例变量及方法的参数,
        使用格式为
                synchronized(非this对象)


synchronized(非this对象)格式的作用只有一种:synchronized(非this对象x)同步代码块:
1)在多个线程持有"对象监视器"为同一个对象的前提下,同一时间只有一个线程可以执行synchronized(非this对象x)同步代码块中的代码;
2)当持有"对象监视器"为同一个对象的前提下,同一时间只有一个线程可以执行synchronized(非this对象x)同步代码块中的代码;



锁非this队友具有一定的优点:
        如果在一个类中有很多歌synchronized方法,这时虽然能实现同步,但会阻塞,所以影响效率;
        但如果使用同步代码块非this对象,则与同步方法是异步的,不与其他锁this同步方法争抢this锁,则可以大大提高效率;


关键字synchronized还可以应用在static静态方法上,如果这样写,那是对当前的*.java文件对应的Class类进行持锁.

syn关键字加到static静态方法上市给Class类上锁,而syn关键字加到非static静态方法上是给对象上锁.
Class锁可以对类的所有对象实例起作用!


在将任何数据类型作为同步锁时,需要注意的是,是否有多个线程同时持有锁对象,
如果同时持有相同的锁对象,则这些线程之间就是同步的,
如果分别获得锁对象,这些线程之间就是异步的!



